---
import Layout from '../layouts/Layout.astro';
import { EXAMPLES } from '../utils/clyp-highlighter';

// Load banner data (same logic as index)
let banner = null;
try {
  const bannerData = await fetch(new URL('/banner.json', Astro.url.origin));
  if (bannerData.ok) {
    const banners = await bannerData.json();
    if (banners && banners.length > 0) {
      const idx = Math.floor(Date.now() / 30000) % banners.length;
      banner = banners[idx];
    }
  }
} catch (e) {
  // Banner file not found or invalid, use null
}

// Group examples by category
const exampleCategories = {
  'Getting Started': ['hello_world', 'variables'],
  'Control Flow': ['conditionals', 'loops'],
  'Functions & Data': ['functions', 'classes'],
  'Advanced Features': ['pipeline', 'file_io']
};
---

<Layout title="Examples - Clyp Programming Language" banner={banner}>
  <!-- Hero Section -->
  <div class="page-header">
    <div class="container">
      <h1>Code Examples</h1>
      <p>Explore Clyp's features through practical, interactive examples</p>
    </div>
  </div>

  <!-- Interactive Example Browser -->
  <section class="examples-browser">
    <div class="container">
      <div class="browser-layout">
        <!-- Sidebar with Categories -->
        <aside class="examples-sidebar">
          <div class="sidebar-header">
            <h3>Browse Examples</h3>
          </div>
          <nav class="examples-nav">
            {Object.entries(exampleCategories).map(([category, examples]) => (
              <div class="nav-category">
                <h4 class="category-title">{category}</h4>
                <ul class="category-examples">
                  {examples.map(exampleKey => {
                    const example = EXAMPLES[exampleKey];
                    return (
                      <li>
                        <button 
                          class="example-nav-btn" 
                          data-example={exampleKey}
                          onclick={`showExample('${exampleKey}')`}
                        >
                          {example.title}
                        </button>
                      </li>
                    );
                  })}
                </ul>
              </div>
            ))}
          </nav>
        </aside>

        <!-- Main Content Area -->
        <main class="examples-main">
          <div class="example-viewer">
            <div class="viewer-header">
              <div class="example-info">
                <h2 id="current-title">Choose an example</h2>
                <p id="current-description">Select an example from the sidebar to get started</p>
              </div>
              <div class="viewer-actions">
                <button class="action-btn" id="copy-btn" onclick="copyCurrentExample()" disabled>
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
                  </svg>
                  Copy Code
                </button>
                <button class="action-btn" onclick="runExample()" disabled id="run-btn">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                  Try Online
                </button>
              </div>
            </div>
            
            <div class="code-display">
              <div class="code-window">
                <div class="code-header">
                  <div class="code-dots">
                    <span class="dot red"></span>
                    <span class="dot yellow"></span>
                    <span class="dot green"></span>
                  </div>
                  <span class="code-title" id="current-filename">example.clyp</span>
                </div>
                <div class="code-content" id="code-content">
                  <div class="placeholder">
                    <div class="placeholder-icon">üìù</div>
                    <p>Select an example to view its code</p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Code explanation -->
            <div class="code-explanation" id="code-explanation" style="display: none;">
              <h3>What's happening here?</h3>
              <div id="explanation-content"></div>
            </div>
          </div>
        </main>
      </div>
    </div>
  </section>

  <!-- Quick Start Section -->
  <section class="quick-start">
    <div class="container">
      <div class="quick-start-content">
        <div class="quick-start-text">
          <h2>Ready to try Clyp yourself?</h2>
          <p>Install Clyp and start experimenting with these examples on your local machine.</p>
          <div class="install-steps">
            <div class="step">
              <span class="step-number">1</span>
              <div class="step-content">
                <h4>Install Clyp</h4>
                <code>pip install clyp</code>
              </div>
            </div>
            <div class="step">
              <span class="step-number">2</span>
              <div class="step-content">
                <h4>Create a file</h4>
                <code>touch hello.clyp</code>
              </div>
            </div>
            <div class="step">
              <span class="step-number">3</span>
              <div class="step-content">
                <h4>Run your code</h4>
                <code>clyp hello.clyp</code>
              </div>
            </div>
          </div>
        </div>
        <div class="quick-start-visual">
          <div class="terminal-window">
            <div class="terminal-header">
              <div class="terminal-dots">
                <span class="dot red"></span>
                <span class="dot yellow"></span>
                <span class="dot green"></span>
              </div>
              <span class="terminal-title">Terminal</span>
            </div>
            <div class="terminal-content">
              <div class="terminal-line">
                <span class="prompt">$</span>
                <span class="command">pip install clyp</span>
              </div>
              <div class="terminal-line output">
                <span>‚úì Successfully installed clyp</span>
              </div>
              <div class="terminal-line">
                <span class="prompt">$</span>
                <span class="command">clyp hello.clyp</span>
              </div>
              <div class="terminal-line output">
                <span>Hello, Clyp! üéâ</span>
              </div>
              <div class="terminal-cursor">‚ñà</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
.examples-browser {
  padding: var(--spacing-2xl) 0 var(--spacing-4xl);
}

.browser-layout {
  display: grid;
  grid-template-columns: 320px 1fr;
  gap: var(--spacing-2xl);
  min-height: 600px;
}

.examples-sidebar {
  background: var(--bg-card);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-xl);
  padding: var(--spacing-xl);
  position: sticky;
  top: var(--spacing-xl);
  height: fit-content;
}

.sidebar-header h3 {
  margin-bottom: var(--spacing-lg);
  color: var(--text-primary);
  font-size: 1.1rem;
}

.nav-category {
  margin-bottom: var(--spacing-xl);
}

.category-title {
  font-size: 0.9rem;
  font-weight: 600;
  color: var(--text-secondary);
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin-bottom: var(--spacing-md);
}

.category-examples {
  list-style: none;
  padding: 0;
}

.category-examples li {
  margin-bottom: var(--spacing-xs);
}

.example-nav-btn {
  width: 100%;
  text-align: left;
  background: none;
  border: none;
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: var(--radius-md);
  color: var(--text-secondary);
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 0.9rem;
}

.example-nav-btn:hover,
.example-nav-btn.active {
  background: var(--gradient-subtle);
  color: var(--text-primary);
}

.examples-main {
  background: var(--bg-card);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-xl);
  overflow: hidden;
}

.viewer-header {
  padding: var(--spacing-xl);
  border-bottom: 1px solid var(--border-color);
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
}

.example-info h2 {
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.example-info p {
  color: var(--text-secondary);
  margin: 0;
}

.viewer-actions {
  display: flex;
  gap: var(--spacing-md);
}

.action-btn {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-sm) var(--spacing-md);
  background: var(--bg-elevated);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  color: var(--text-secondary);
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 0.9rem;
}

.action-btn:not(:disabled):hover {
  background: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
}

.action-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.code-display {
  padding: var(--spacing-xl);
}

.placeholder {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 300px;
  color: var(--text-muted);
  text-align: center;
}

.placeholder-icon {
  font-size: 3rem;
  margin-bottom: var(--spacing-lg);
}

.code-explanation {
  padding: var(--spacing-xl);
  border-top: 1px solid var(--border-color);
  background: var(--gradient-subtle);
}

.code-explanation h3 {
  margin-bottom: var(--spacing-md);
  color: var(--text-primary);
}

.quick-start {
  background: var(--bg-secondary);
  padding: var(--spacing-4xl) 0;
  border-top: 1px solid var(--border-subtle);
}

.quick-start-content {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: var(--spacing-4xl);
  align-items: center;
}

.quick-start h2 {
  font-size: 2rem;
  margin-bottom: var(--spacing-lg);
}

.quick-start p {
  color: var(--text-secondary);
  margin-bottom: var(--spacing-2xl);
}

.install-steps {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-lg);
}

.step {
  display: flex;
  align-items: center;
  gap: var(--spacing-lg);
}

.step-number {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  background: var(--gradient-primary);
  color: white;
  border-radius: 50%;
  font-weight: 600;
  font-size: 0.9rem;
}

.step-content h4 {
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
  font-size: 1rem;
}

.step-content code {
  background: var(--code-bg);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: var(--radius-md);
  font-family: var(--font-mono);
  color: var(--text-accent);
  font-size: 0.9rem;
}

.terminal-window {
  background: var(--code-bg);
  border: 1px solid var(--code-border);
  border-radius: var(--radius-xl);
  overflow: hidden;
  box-shadow: var(--shadow-lg);
}

.terminal-header {
  background: var(--code-header-bg);
  padding: var(--spacing-md) var(--spacing-lg);
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
  border-bottom: 1px solid var(--code-border);
}

.terminal-dots {
  display: flex;
  gap: var(--spacing-sm);
}

.terminal-title {
  color: var(--text-accent);
  font-family: var(--font-mono);
  font-size: 0.9rem;
}

.terminal-content {
  padding: var(--spacing-lg);
  font-family: var(--font-mono);
  font-size: 0.9rem;
  line-height: 1.6;
}

.terminal-line {
  margin-bottom: var(--spacing-sm);
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
}

.prompt {
  color: var(--secondary-color);
  font-weight: 600;
}

.command {
  color: var(--text-accent);
}

.output {
  color: var(--text-secondary);
  padding-left: 1.5rem;
}

.terminal-cursor {
  color: var(--primary-color);
  animation: blink 1s infinite;
}

@keyframes blink {
  0%, 50% { opacity: 1; }
  51%, 100% { opacity: 0; }
}

@media (max-width: 1024px) {
  .browser-layout {
    grid-template-columns: 1fr;
    gap: var(--spacing-xl);
  }
  
  .examples-sidebar {
    position: static;
  }
  
  .quick-start-content {
    grid-template-columns: 1fr;
    gap: var(--spacing-2xl);
  }
}

@media (max-width: 768px) {
  .viewer-header {
    flex-direction: column;
    gap: var(--spacing-lg);
    align-items: stretch;
  }
  
  .viewer-actions {
    justify-content: flex-start;
  }
}
</style>

<script define:vars={{ examples: Object.fromEntries(Object.entries(EXAMPLES).map(([key, example]) => [key, {
  title: example.title,
  description: example.description,
  code: example.code,
  highlighted_code: example.highlighted_code
}])) }}>
// Store current example data
let currentExample = null;

function showExample(exampleKey) {
  currentExample = exampleKey;
  const example = examples[exampleKey];
  
  if (!example) return;
  
  // Update active nav button
  document.querySelectorAll('.example-nav-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  document.querySelector(`[data-example="${exampleKey}"]`)?.classList.add('active');
  
  // Update content
  document.getElementById('current-title').textContent = example.title;
  document.getElementById('current-description').textContent = example.description;
  document.getElementById('current-filename').textContent = `${exampleKey}.clyp`;
  document.getElementById('code-content').innerHTML = example.highlighted_code;
  
  // Enable buttons
  document.getElementById('copy-btn').removeAttribute('disabled');
  document.getElementById('run-btn').removeAttribute('disabled');
  
  // Show explanation (you could add explanations to your examples data)
  const explanationEl = document.getElementById('code-explanation');
  if (explanationEl) {
    explanationEl.style.display = 'block';
    // Add specific explanations based on example type
    let explanation = '';
    switch(exampleKey) {
      case 'hello_world':
        explanation = 'This example shows the basic syntax of Clyp. Notice how clean and readable the code is - no semicolons required!';
        break;
      case 'variables':
        explanation = 'Clyp uses clear type annotations. The `str` and `int` types make your intentions explicit and help catch errors early.';
        break;
      case 'functions':
        explanation = 'Function definitions in Clyp are concise yet expressive. The return type annotation helps with code clarity and tooling support.';
        break;
      default:
        explanation = 'This example demonstrates key features of the Clyp programming language.';
    }
    document.getElementById('explanation-content').textContent = explanation;
  }
}

function copyCurrentExample() {
  if (!currentExample) return;
  
  const example = examples[currentExample];
  navigator.clipboard.writeText(example.code).then(() => {
    const btn = document.getElementById('copy-btn');
    if (btn) {
      const originalHTML = btn.innerHTML;
      btn.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/></svg>Copied!';
      setTimeout(() => {
        btn.innerHTML = originalHTML;
      }, 2000);
    }
  });
}

function runExample() {
  // This could link to an online Clyp playground in the future
  alert('Online playground coming soon! For now, install Clyp locally to run examples.');
}

// Auto-select first example on page load
document.addEventListener('DOMContentLoaded', () => {
  const firstExample = Object.keys(examples)[0];
  if (firstExample) {
    showExample(firstExample);
  }
});

// Make functions globally available
window.showExample = showExample;
window.copyCurrentExample = copyCurrentExample;
window.runExample = runExample;
</script>