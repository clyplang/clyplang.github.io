---
import Layout from '../layouts/Layout.astro';

// Load banner data (same logic as index)
let banner = null;
try {
  const bannerData = await fetch(new URL('/banner.json', Astro.url.origin));
  if (bannerData.ok) {
    const banners = await bannerData.json();
    if (banners && banners.length > 0) {
      const idx = Math.floor(Date.now() / 30000) % banners.length;
      banner = banners[idx];
    }
  }
} catch (e) {
  // Banner file not found or invalid, use null
}
---

<Layout title="What's Happening Â· Clyp" banner={banner}>
  <div class="page-header">
    <div class="header-container">
      <h1>What's Happening</h1>
      <p class="subtitle">Stay up to date with the latest releases and pull requests for Clyp!</p>
    </div>
  </div>
  <section class="whats-happening-section">
    <div class="whats-happening-container">
      <div class="whats-happening-flex">
        <div class="whats-happening-card">
          <h2>ðŸš€ Recent Releases</h2>
          <div id="releases-list" class="wh-list loading">
            <div class="wh-loading">Loading releasesâ€¦</div>
          </div>
        </div>
        <div class="whats-happening-card">
          <h2>ðŸ”€ Open Pull Requests</h2>
          <div id="prs-list" class="wh-list loading">
            <div class="wh-loading">Loading pull requestsâ€¦</div>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
async function fetchGitHub(url: string) {
  const resp = await fetch(url, {headers: { 'Accept': 'application/vnd.github+json' }});
  if (!resp.ok) return [];
  return await resp.json();
}

function formatDate(dateStr: string) {
  const d = new Date(dateStr);
  return d.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
}

function getReleaseType(name: string) {
  // Normalize for easier matching
  const n = name.toLowerCase();
  if (/alpha/.test(n)) return 'alpha';
  if (/beta/.test(n)) return 'beta';
  if (/rc(\d*)|release candidate/.test(n)) return 'rc';
  return 'release';
}

function formatReleaseName(name: string) {
  // Remove -alpha, -beta, -rc, and similar, but do NOT add [Tag] text
  let base = name;
  // Remove patterns
  base = base.replace(/[- ]?(alpha|beta|rc\d*|rc|release candidate( \d*)?)/i, '').trim();
  // Remove trailing or leading dashes/spaces
  base = base.replace(/[- ]+$/, '').replace(/^[- ]+/, '');
  return base;
}

function getTagColor(type: string) {
  if (type === 'alpha') return '#ff6b6b'; // Red
  if (type === 'beta') return '#45b7d1'; // Blue
  if (type === 'rc') return '#ffd600'; // Yellow
  return '#4ecdc4'; // Green
}

function renderReleaseTag(type: string, label: string) {
  const color = getTagColor(type);
  // Show the label (e.g., Alpha, Beta, Release Candidate, Release) inside the colored tag
  return `<span class="release-tag" style="background:${color};color:#fff;border-radius:0.4em;padding:0.1em 0.6em;font-size:0.85em;margin-left:0.5em;vertical-align:middle;">${label}</span>`;
}

function getReleasePageUrl(r: any) {
  // Try to use tag_name, fallback to name, strip leading 'v'
  let version = (r.tag_name || r.name || '').replace(/^v/, '');
  return `https://clyp.codesft.dev/release/${version}`;
}

async function loadReleases() {
  const releases = await fetchGitHub('https://api.github.com/repos/clyplang/clyp/releases');
  const el = document.getElementById('releases-list');
  if (el) {
    el.classList.remove('loading');
    if (!releases.length) {
      el.innerHTML = '<div class="wh-empty">No releases found.</div>';
      return;
    }
    el.innerHTML = releases.slice(0, 5).map((r: any) => {
      const type = getReleaseType(r.name || r.tag_name);
      const label = type === 'alpha' ? 'Alpha' : type === 'beta' ? 'Beta' : type === 'rc' ? 'Release Candidate' : 'Release';
      const formatted = formatReleaseName(r.name || r.tag_name);
      const tag = renderReleaseTag(type, label);
      const releasePageUrl = getReleasePageUrl(r);
      return `
        <div class="wh-item">
          <div class="wh-title"><a href="${releasePageUrl}">${formatted}${tag}</a></div>
          <div class="wh-meta">Published <span>${formatDate(r.published_at)}</span></div>
          <div class="wh-body">${r.body ? r.body.substring(0, 180).replace(/\n/g, ' ') + (r.body.length > 180 ? 'â€¦' : '') : ''}</div>
        </div>
      `;
    }).join('');
  }
}

async function loadPRs() {
  const prs = await fetchGitHub('https://api.github.com/repos/clyplang/clyp/pulls');
  const el = document.getElementById('prs-list');
  if (el) {
    el.classList.remove('loading');
    if (!prs.length) {
      el.innerHTML = '<div class="wh-empty">No open pull requests.</div>';
      return;
    }
    el.innerHTML = prs.slice(0, 8).map((pr: any) => `
      <div class="wh-item">
        <div class="wh-title"><a href="${pr.html_url}" target="_blank">${pr.title}</a></div>
        <div class="wh-meta">By <span>${pr.user.login}</span> &middot; Opened <span>${formatDate(pr.created_at)}</span></div>
        <div class="wh-body">${pr.body ? pr.body.substring(0, 120).replace(/\n/g, ' ') + (pr.body.length > 120 ? 'â€¦' : '') : ''}</div>
      </div>
    `).join('');
  }
}

window.addEventListener('DOMContentLoaded', () => {
  loadReleases();
  loadPRs();
});
</script>

<style>
.whats-happening-section { background: var(--bg-secondary); padding: 3rem 0; }
.whats-happening-container { max-width: 1200px; margin: 0 auto; padding: 0 1.5rem; }
.whats-happening-flex { display: flex; gap: 2.5rem; flex-wrap: wrap; }
.whats-happening-card { background: var(--bg-card); border-radius: 1rem; box-shadow: var(--shadow-md); flex: 1 1 350px; padding: 2rem; min-width: 320px; }
.whats-happening-card h2 { font-size: 1.4rem; margin-bottom: 1.5rem; color: var(--primary-color); }
.wh-list { display: flex; flex-direction: column; gap: 1.5rem; }
.wh-item { border-left: 4px solid var(--primary-color); background: var(--bg-tertiary); border-radius: 0.5rem; padding: 1rem 1.2rem; box-shadow: var(--shadow-sm); }
.wh-title { font-weight: 600; font-size: 1.1rem; margin-bottom: 0.3rem; }
.wh-title a { color: var(--text-primary); text-decoration: none; }
.wh-title a:hover { color: var(--primary-color); text-decoration: underline; }
.wh-meta { color: var(--text-secondary); font-size: 0.95rem; margin-bottom: 0.5rem; }
.wh-body { color: var(--text-secondary); font-size: 0.98rem; }
.wh-loading, .wh-empty { color: var(--text-light); text-align: center; padding: 1.5rem 0; }
.release-tag { display: inline-block; padding: 0.2em 0.6em; border-radius: 0.4em; font-size: 0.85em; margin-left: 0.5em; vertical-align: middle; }
@media (max-width: 900px) { .whats-happening-flex { flex-direction: column; gap: 2rem; } }
</style>